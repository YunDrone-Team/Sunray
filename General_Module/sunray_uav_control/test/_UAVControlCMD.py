# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sunray_msgs/UAVControlCMD.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class UAVControlCMD(genpy.Message):
  _md5sum = "9e1056b79cce67cfc1fef0aea8de2d1e"
  _type = "sunray_msgs/UAVControlCMD"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

## 控制命令的编号
uint32 cmd_id

## 控制命令
uint8 cmd
## cmd 枚举
uint8 Init = 0
uint8 Takeoff = 1               ## home点上方悬停
uint8 Hover = 2                 ## 当前位置上方悬停
uint8 Land = 3                  ## 原地降落
uint8 XYZ_POS = 4               ## 惯性系定点控制
uint8 XY_VEL_Z_POS = 5          ## 惯性系定高速度控制
uint8 XYZ_VEL = 6               ## 惯性系速度控制
uint8 XYZ_POS_BODY = 7          ## 机体系位置控制
uint8 XYZ_VEL_BODY = 8          ## 机体系速度控制
uint8 XY_VEL_Z_POS_BODY = 9     ## 机体系定高速度控制
uint8 TRAJECTORY = 10           ## 轨迹追踪控制
uint8 XYZ_ATT = 11              ## 姿态控制（来自外部控制器）
uint8 LAT_LON_ALT = 12          ## 绝对坐标系下的经纬度

## 控制命令期望值
float64[3] desired_pos          ## [m]
float64[3] desired_vel          ## [m/s]
float64[3] desired_acc          ## [m/s^2]
float64[3] desired_att          ## [rad]
float64 desired_thrust          ## [0-1]
float64 desired_yaw             ## [rad]
float64 desired_yaw_rate        ## [rad/s]
float64 latitude                ## 无人机经度、纬度、高度                 
float64 longitude               ## 无人机经度、纬度、高度
float64 altitude                ## 无人机经度、纬度、高度


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  Init = 0
  Takeoff = 1
  Hover = 2
  Land = 3
  XYZ_POS = 4
  XY_VEL_Z_POS = 5
  XYZ_VEL = 6
  XYZ_POS_BODY = 7
  XYZ_VEL_BODY = 8
  XY_VEL_Z_POS_BODY = 9
  TRAJECTORY = 10
  XYZ_ATT = 11
  LAT_LON_ALT = 12

  __slots__ = ['header','cmd_id','cmd','desired_pos','desired_vel','desired_acc','desired_att','desired_thrust','desired_yaw','desired_yaw_rate','latitude','longitude','altitude']
  _slot_types = ['std_msgs/Header','uint32','uint8','float64[3]','float64[3]','float64[3]','float64[3]','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,cmd_id,cmd,desired_pos,desired_vel,desired_acc,desired_att,desired_thrust,desired_yaw,desired_yaw_rate,latitude,longitude,altitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UAVControlCMD, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.cmd_id is None:
        self.cmd_id = 0
      if self.cmd is None:
        self.cmd = 0
      if self.desired_pos is None:
        self.desired_pos = [0.] * 3
      if self.desired_vel is None:
        self.desired_vel = [0.] * 3
      if self.desired_acc is None:
        self.desired_acc = [0.] * 3
      if self.desired_att is None:
        self.desired_att = [0.] * 3
      if self.desired_thrust is None:
        self.desired_thrust = 0.
      if self.desired_yaw is None:
        self.desired_yaw = 0.
      if self.desired_yaw_rate is None:
        self.desired_yaw_rate = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.cmd_id = 0
      self.cmd = 0
      self.desired_pos = [0.] * 3
      self.desired_vel = [0.] * 3
      self.desired_acc = [0.] * 3
      self.desired_att = [0.] * 3
      self.desired_thrust = 0.
      self.desired_yaw = 0.
      self.desired_yaw_rate = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IB().pack(_x.cmd_id, _x.cmd))
      buff.write(_get_struct_3d().pack(*self.desired_pos))
      buff.write(_get_struct_3d().pack(*self.desired_vel))
      buff.write(_get_struct_3d().pack(*self.desired_acc))
      buff.write(_get_struct_3d().pack(*self.desired_att))
      _x = self
      buff.write(_get_struct_6d().pack(_x.desired_thrust, _x.desired_yaw, _x.desired_yaw_rate, _x.latitude, _x.longitude, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.cmd_id, _x.cmd,) = _get_struct_IB().unpack(str[start:end])
      start = end
      end += 24
      self.desired_pos = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.desired_vel = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.desired_acc = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 24
      self.desired_att = _get_struct_3d().unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.desired_thrust, _x.desired_yaw, _x.desired_yaw_rate, _x.latitude, _x.longitude, _x.altitude,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IB().pack(_x.cmd_id, _x.cmd))
      buff.write(self.desired_pos.tostring())
      buff.write(self.desired_vel.tostring())
      buff.write(self.desired_acc.tostring())
      buff.write(self.desired_att.tostring())
      _x = self
      buff.write(_get_struct_6d().pack(_x.desired_thrust, _x.desired_yaw, _x.desired_yaw_rate, _x.latitude, _x.longitude, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.cmd_id, _x.cmd,) = _get_struct_IB().unpack(str[start:end])
      start = end
      end += 24
      self.desired_pos = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.desired_vel = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.desired_acc = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.desired_att = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      _x = self
      start = end
      end += 48
      (_x.desired_thrust, _x.desired_yaw, _x.desired_yaw_rate, _x.latitude, _x.longitude, _x.altitude,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_IB = None
def _get_struct_IB():
    global _struct_IB
    if _struct_IB is None:
        _struct_IB = struct.Struct("<IB")
    return _struct_IB
